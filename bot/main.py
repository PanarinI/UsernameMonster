import time
import asyncio
import sys
import os
import logging
import json

from aiohttp import web
from setup import bot, dp
from aiogram.types import Update
from handlers.start import start_router
from handlers.generate import generate_router
from handlers.check import check_router
from database.database import init_db
from logger import setup_logging

import config

# ‚úÖ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
setup_logging()

sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

# === üîç –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã ===
IS_LOCAL = os.getenv("LOCAL_RUN", "false").lower() == "true"

# === üåç –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Webhook ===
WEBHOOK_HOST = os.getenv("WEBHOOK_URL", "https://namehuntbot-panarini.amvera.io").strip()
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}".replace("http://", "https://")

# === üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Web-—Å–µ—Ä–≤–µ—Ä–∞ ===
WEBAPP_HOST = "0.0.0.0"
WEBAPP_PORT = int(os.getenv("WEBHOOK_PORT", 80))

async def on_startup():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    await init_db()

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    dp.include_router(start_router)
    dp.include_router(check_router)
    dp.include_router(generate_router)


    if IS_LOCAL:
        logging.info("üõë –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫. Webhook –ù–ï –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        await bot.delete_webhook(drop_pending_updates=True)  # –û—á–∏—Å—Ç–∏–º —Å—Ç–∞—Ä—ã–µ –∞–ø–¥–µ–π—Ç—ã
    else:
        logging.info(f"üîó –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫: {WEBHOOK_URL}")
        try:
            await bot.delete_webhook(drop_pending_updates=True)  # –û—á–∏—Å—Ç–∏–º —Å—Ç–∞—Ä—ã–µ –∞–ø–¥–µ–π—Ç—ã –ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π –≤–µ–±—Ö—É–∫–∞
            await bot.set_webhook(WEBHOOK_URL)
            logging.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ Webhook: {e}")
            sys.exit(1)


async def on_shutdown(_):
    """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏ –ø–µ—Ä–µ–¥ –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π"""
    logging.info("üö® –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ó–∞–∫—Ä—ã–≤–∞—é —Å–µ—Å—Å–∏—é...")
    try:
        await bot.session.close()
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–µ—Å—Å–∏–∏: {e}")
    logging.info("‚úÖ –°–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã—Ç–∞.")




async def handle_update(request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ Webhook (–ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã –æ—Ç Telegram)"""
    time_start = time.time()
    raw_text = await request.text()

    try:
        update_data = json.loads(raw_text)
        current_time = int(time.time())

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ –∞–ø–¥–µ–π—Ç—ã (—Å—Ç–∞—Ä—à–µ 15 —Å–µ–∫—É–Ω–¥)
        if "message" in update_data:
            message_time = update_data["message"]["date"]
            if current_time - message_time > 15:
                logging.warning(f"‚ö†Ô∏è –°—Ç–∞—Ä–∞—è –∫–æ–º–∞–Ω–¥–∞ ({message_time}), –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º.")
                return web.Response(status=200)

        if "callback_query" in update_data:
            callback_time = update_data["callback_query"].get("date", current_time)
            if current_time - callback_time > 15:
                logging.warning(f"‚ö†Ô∏è –°—Ç–∞—Ä–∞—è callback-–∫–æ–º–∞–Ω–¥–∞ ({callback_time}), –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º.")
                return web.Response(status=200)

        update = Update(**update_data)
        await dp.feed_update(bot=bot, update=update)

        time_end = time.time()
        logging.info(f"‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∑–∞–Ω—è–ª–∞ {time_end - time_start:.4f} —Å–µ–∫—É–Ω–¥")
        return web.Response()

    except json.JSONDecodeError:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {raw_text}")

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Webhook: {e}", exc_info=True)
        return web.Response(status=500)



async def handle_root(request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ (–ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã)"""
    logging.info("‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω GET-–∑–∞–ø—Ä–æ—Å –Ω–∞ /")
    return web.Response(text="‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!", content_type="text/plain")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    await on_startup()

    if IS_LOCAL:
        logging.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ Polling...")
        await dp.start_polling(bot)
        sys.exit(0)  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —á—Ç–æ–±—ã Webhook –ù–ï –∑–∞–ø—É—Å–∫–∞–ª—Å—è!

    # üåê –ï—Å–ª–∏ —Ä–µ–∂–∏–º Webhook (—Å–µ—Ä–≤–µ—Ä)
    logging.info("‚ö° –ë–û–¢ –ü–ï–†–ï–ó–ê–ü–£–©–ï–ù (–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª –∑–∞–Ω–æ–≤–æ)")
    app = web.Application()
    app.add_routes([
        web.get("/", handle_root),
        web.post("/webhook", handle_update)
    ])
    app.on_shutdown.append(on_shutdown)
    return app


async def start_server():
    """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –∏–ª–∏ Polling"""
    try:
        app = await main()

        if IS_LOCAL:
            logging.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ Polling...")
            await dp.start_polling(bot)
            sys.exit(0)  # ‚õîÔ∏è –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —á—Ç–æ–±—ã Webhook –ù–ï –∑–∞–ø—É—Å–∫–∞–ª—Å—è!

        # üåç Webhook Mode
        logging.info("‚úÖ –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ Webhook...")
        runner = web.AppRunner(app)
        await runner.setup()
        site = web.TCPSite(runner, "0.0.0.0", WEBAPP_PORT)
        await site.start()

        logging.info(f"‚úÖ Webhook —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {WEBAPP_PORT}")

        # ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –±–µ–∑ `while True`
        await asyncio.Event().wait()

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        sys.exit(1)

logging.getLogger("asyncio").setLevel(logging.WARNING)  # ‚úÖ –û—Ç–∫–ª—é—á–∞–µ—Ç DEBUG –¥–ª—è asyncio


if __name__ == "__main__":
    try:
        asyncio.run(start_server())
    except KeyboardInterrupt:
        logging.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
    except Exception as e:
        logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

    while True:
        time.sleep(3600)  # ‚¨ÖÔ∏è –î–µ—Ä–∂–∏–º –ø—Ä–æ—Ü–µ—Å—Å –∂–∏–≤—ã–º
