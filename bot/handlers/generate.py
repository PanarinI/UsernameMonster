import logging
import asyncio
import re
from datetime import datetime
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

import json
import base64
import urllib.parse

from aiogram import Bot, Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from services.generate import gen_process_and_check
from keyboards.generate import generate_username_kb, error_retry_kb, styles_kb, initial_styles_kb, escape_md
from keyboards.main_menu import main_menu_kb, back_to_main_kb
from .states import GenerateUsernameStates

import config


generate_router = Router()


### ‚úÖ 1. –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–ö–ò "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å username"
@generate_router.callback_query(F.data == "generate")
async def cmd_generate_username(query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å username".
    """
    logging.info(f"üì© –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å username' –æ—Ç {query.from_user.username} (id={query.from_user.id})")

    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥–æ–π
    await asyncio.sleep(0.05)  # ‚úÖ –î–∞–µ–º FSM –≤—Ä–µ–º—è —Å–±—Ä–æ—Å–∏—Ç—å—Å—è
    await state.update_data(start_time=datetime.now().isoformat())
    await query.message.answer(
        "üî≠ –û —á—ë–º –¥–æ–ª–∂–Ω–æ –≥–æ–≤–æ—Ä–∏—Ç—å –∏–º—è? –ù–∞–ø–∏—à–∏ —Ç–µ–º—É, –∏ —è –ø–æ–π–º–∞—é —Ç—Ä–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–º–µ–Ω–∏.\n"
        "<i>–ù–∞–ø—Ä–∏–º–µ—Ä: ¬´–∑–∞–≥–∞–¥–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏¬ª, ¬´–∫–æ—Å–º–∏—á–µ—Å–∫–∏–µ –∫–æ—Ç–∏–∫–∏¬ª, –∏–ª–∏ —á—Ç–æ —É–≥–æ–¥–Ω–æ ‚Äî "
        '<a href="https://telegra.ph/Mogut-li-zakonchitsya-Telegram-imena-02-21">–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏–º—ë–Ω –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ!</a></i>',
        parse_mode="HTML",
        disable_web_page_preview=True,
        reply_markup=back_to_main_kb()
    )


    await state.set_state(GenerateUsernameStates.waiting_for_context)
    await query.answer()  # Telegram —Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, —á—Ç–æ callback –æ–±—Ä–∞–±–æ—Ç–∞–Ω.


@generate_router.message(Command("generate"))  # –§–∏–ª—å—Ç—Ä —á—Ç–æ–±—ã /generate —Å—Ä–∞–±–∞—Ç—ã–≤–∞–ª –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
async def cmd_generate_slash(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /generate.
    """
    logging.info(f"üì© –ö–æ–º–∞–Ω–¥–∞ /generate –æ—Ç {message.from_user.username} (id={message.from_user.id})")

    await state.clear()  # ‚õîÔ∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –í–°–ï —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await asyncio.sleep(0.1)  # üîÑ –î–∞—ë–º FSM –≤—Ä–µ–º—è —Å–±—Ä–æ—Å–∏—Ç—å—Å—è

    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É/–∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ username:", reply_markup=back_to_main_kb())
    await state.set_state(GenerateUsernameStates.waiting_for_context)


@generate_router.message(GenerateUsernameStates.waiting_for_context)
async def process_context_input(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞. –¢–µ–ø–µ—Ä—å –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ —Ç–µ–º—ã –ø–æ—è–≤–ª—è–µ—Ç—Å—è 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞:
    - –ë–µ–∑ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è (–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ä–∞–∑—É)
    - –í—ã–±—Ä–∞—Ç—å —Å—Ç–∏–ª—å (–æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –≤—Ç–æ—Ä–æ–µ –º–µ–Ω—é)
    """
    context_text = message.text.strip()
    logging.info(f"üìù –í–≤–µ–¥—ë–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç: '{context_text}' (–æ—Ç {message.from_user.username}, id={message.from_user.id})")

    # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    if len(context_text) > config.MAX_CONTEXT_LENGTH:
        logging.warning(f"‚ö†Ô∏è –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π ({len(context_text)} —Å–∏–º–≤–æ–ª–æ–≤), –æ–±—Ä–µ–∑–∞–µ–º –¥–æ {config.MAX_CONTEXT_LENGTH}.")
        await message.answer(f"‚ö†Ô∏è –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –û–±—Ä–µ–∑–∞—é –¥–æ {config.MAX_CONTEXT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤.")
        context_text = context_text[:config.MAX_CONTEXT_LENGTH]

    # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ FSM, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è
    await state.update_data(context=context_text)

    # ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–≤—É–º—è –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
    await message.answer(
        "üé≠ –ö–∞–∫ –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å –∏–º—è?",
        reply_markup=initial_styles_kb()  # –ú–µ–Ω—é –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
    )

    await state.set_state(GenerateUsernameStates.waiting_for_style)


@generate_router.callback_query(GenerateUsernameStates.waiting_for_style)
async def process_style_choice(query: types.CallbackQuery, state: FSMContext, bot: Bot):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å—Ç–∏–ª—è –∏–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –±–µ–∑ —Å—Ç–∏–ª—è.
    """
    selected_option = query.data

    if selected_option == "back_to_main_style_menu":
        await query.message.edit_reply_markup(reply_markup=initial_styles_kb())  # –ú–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await query.answer()
        return

    if selected_option == "choose_style":
        await query.message.edit_text(
            "üé≠ –í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:",
            reply_markup=styles_kb()
        )
        return

    elif selected_option == "no_style":
        await state.update_data(start_time=datetime.now().isoformat())
        progress_task = asyncio.create_task(send_progress_messages(query))
        await perform_username_generation(query, state, bot, style=None)
        progress_task.cancel()
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å—Ç–∏–ª—è
    await state.update_data(start_time=datetime.now().isoformat())
    progress_task = asyncio.create_task(send_progress_messages(query))
    await perform_username_generation(query, state, bot, style=selected_option)
    progress_task.cancel()



def contains_cyrillic(text: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã."""
    return bool(re.search(r'[–∞-—è–ê-–Ø]', text))



async def send_progress_messages(query: types.CallbackQuery):
    """–§–æ–Ω–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."""
    messages = [
        "–ü—Ä–∏—Å–ª—É—à–∏–≤–∞—é—Å—å –∫ —Ü–∏—Ñ—Ä–æ–≤–æ–º—É —ç—Ñ–∏—Ä—É...",
        "‚è≥...",
    ]

    for msg in messages:
        await asyncio.sleep(6)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        try:
            logging.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ: {msg}")
            await query.message.answer(msg)
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
            break


async def perform_username_generation(query: CallbackQuery, state: FSMContext, bot: Bot, style: str | None):
    data = await state.get_data()
    context_text = data.get("context", "")
    start_time = data.get("start_time", "")

    if not start_time:
        logging.warning("‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! start_time –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ FSM. –£—Å—Ç–∞–Ω–æ–≤–∏–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è.")
        start_time = datetime.now().isoformat()

    if not context_text:
        await query.message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–º—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", reply_markup=main_menu_kb())
        await state.clear()
        return

    logging.info(f"üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è username: –∫–æ–Ω—Ç–µ–∫—Å—Ç='{context_text}', —Å—Ç–∏–ª—å='{style}'")

    await query.message.answer("‚è≥ –í—ã—Å–ª–µ–∂–∏–≤–∞—é...")

    try:
        raw_usernames = await asyncio.wait_for(
            gen_process_and_check(bot, context_text, style, config.AVAILABLE_USERNAME_COUNT),
            timeout=config.GEN_TIMEOUT
        )
        usernames = [u.strip() for u in raw_usernames if u.strip()]

        if not usernames:
            logging.warning(f"‚ùå AI –æ—Ç–∫–∞–∑–∞–ª—Å—è –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å username –ø–æ —ç—Ç–∏—á–µ—Å–∫–∏–º —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏—è–º (–∫–æ–Ω—Ç–µ–∫—Å—Ç: '{context_text}', —Å—Ç–∏–ª—å: '{style}').")
            await query.message.answer(
                "‚ùå AI –æ—Ç–∫–∞–∑–∞–ª—Å—è –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–º–µ–Ω–∞ –ø–æ —ç—Ç–∏—á–µ—Å–∫–∏–º —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏—è–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.",
                reply_markup=error_retry_kb()
            )
            await state.clear()
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ usernames –≤ FSM
        await state.update_data(usernames=usernames)
        await handle_generation_result(query, usernames, context_text, style, start_time)
        await state.set_state(None)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–µ–∑ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö


    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        await query.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", reply_markup=error_retry_kb())
        await state.clear()


    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        await query.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", reply_markup=error_retry_kb())
        await state.clear()

from keyboards.generate import generate_username_kb


async def handle_generation_result(query: types.CallbackQuery, usernames: list[str], context: str, style: str | None,
                                   start_time: str):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    try:
        start_dt = datetime.fromisoformat(start_time)
    except ValueError:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç start_time: '{start_time}'. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è.")
        start_dt = datetime.now()

    # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    duration = (datetime.now() - start_dt).total_seconds()

    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é generate_username_kb, –∫–æ—Ç–æ—Ä–∞—è —Å–∞–º–∞ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    message_text, keyboard = generate_username_kb(usernames, context, style, duration)

    await query.message.answer(
        message_text,
        parse_mode="MarkdownV2",
        reply_markup=keyboard
    )

    logging.info("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–æ–∑–¥–∞—Ç—å –±—Ä–µ–Ω–¥ –∏–∑ –∏–º–µ–Ω–∏"
@generate_router.callback_query(F.data == "create_brand")
async def create_brand_handler(query: CallbackQuery, state: FSMContext):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–æ—Å—Ç—É–ø–Ω—ã–µ username –≤ –≤–∏–¥–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞.
    """
    await query.answer()

    # –ü–æ–ª—É—á–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ username –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    data = await state.get_data()
    usernames = data.get("usernames", [])

    if not usernames:
        logging.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ username –≤ FSM.")
        await query.message.answer("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ username. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ username
    message_text = "–í—ã–±–µ—Ä–∏—Ç–µ –∏–º—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–µ–Ω–¥–∞:"

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ username
    kb = InlineKeyboardMarkup(inline_keyboard=[ # —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º inline_keyboard
        [InlineKeyboardButton(text=f"@{username}", callback_data=f"choose_username:{username}")]
        for username in usernames
    ])

    await query.message.answer(message_text, reply_markup=kb)


@generate_router.callback_query(lambda c: c.data.startswith("choose_username:"))
async def choose_username_handler(query: CallbackQuery, state: FSMContext):
    await query.answer()

    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π username
    username = query.data.split(":")[1].strip()

    # –ü–æ–ª—É—á–∞–µ–º context –∏–∑ FSM
    data = await state.get_data()
    context_text = data.get("context", "").strip()

    if not context_text:
        logging.warning(f"‚ö†Ô∏è Context –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ FSM –¥–ª—è user_id={query.from_user.id}.")
        await query.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª–æ–≤–∞—Ä—å
    data = {"username": username, "context": context_text}
    # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –≤ JSON (—Å ensure_ascii=True, —á—Ç–æ–±—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–¥–µ—Ä–∂–∞–ª —Ç–æ–ª—å–∫–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã)
    json_str = json.dumps(data, ensure_ascii=True)
    # –ö–æ–¥–∏—Ä—É–µ–º –≤ URL-safe Base64
    encoded = base64.urlsafe_b64encode(json_str.encode()).decode()
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É
    link = f"https://t.me/Abstract2Real_bot?start={encoded}"

    await query.message.answer(
        f"–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ–∑–¥–∞–Ω–∏—é –∫–æ–Ω—Ü–µ–ø—Ç–∞ –±—Ä–µ–Ω–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ <b>{username}</b>.\n"
        f'<a href="{link}">–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å</a> (–≤—ã –ø–µ—Ä–µ–π–¥–µ—Ç–µ –∫ –¥—Ä—É–≥–æ–º—É –±–æ—Ç—É)',
        parse_mode="HTML",
        disable_web_page_preview=True
    )



git remote add origin https://github.com/panarini/usernamemonster.git
git branch -M main
git push -u origin main
